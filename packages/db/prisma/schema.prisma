generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  referentialIntegrity = "prisma"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       Boolean   @default(false)
  name                String?

  onboarding          Onboarding?
  emailVerification   EmailVerification?
  householdMember     HouseholdMember?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Expense {
  id                  String          @id @default(cuid())
  complete            Boolean         @default(false)
  description         String    
  amount              Float
  date                DateTime        @default(now())

  member              HouseholdMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId            String    

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model EmailVerification {
  id                  String    @id @default(cuid())
  code                String    
  expires             DateTime

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String    @unique

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Onboarding {
  id                  String    @id @default(cuid())
  userinfoComplete   Boolean   @default(false)
  householdComplete  Boolean   @default(false)
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String    @unique

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Household {
  id                  String    @id @default(cuid())
  name                String

  members             HouseholdMember[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model HouseholdMember {
  id                  String    @id @default(cuid())

  household           Household @relation(fields: [householdId], references: [id])
  householdId         String    

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String    @unique

  expense             Expense[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
